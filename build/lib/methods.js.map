{
  "version": 3,
  "sources": ["../../src/lib/methods.ts"],
  "sourcesContent": ["/**\n * Methods and Tools\n * @desc    Methods and Tools\n * @author  Acgua <https://github.com/Acgua/ioBroker.oura>\n * @license Apache License 2.0\n *\n * ----------------------------------------------------------------------------------------\n * How to implement this file in main.ts (see also https://stackoverflow.com/a/58459668)\n * ----------------------------------------------------------------------------------------\n *  1. Add \"this: Oura\" as first function parameter if you need access to \"this\"\n *       -> no need to provide this parameter when calling the method, though!\n *  1. Add line like \"import { err2Str, isEmpty } from './lib/methods';\"\n *  2. Add keyword \"export\" before \"class Oura extends utils.Adapter\"\n *  3. class Oura: for each method, add line like: \"public isEmpty = isEmpty.bind(this);\"\n *           Note: use \"private isEmpty...\" and not \"public\", if you do not need to access method from this file\n */\n\nimport { Oura } from '../main';\n\n/**\n * Convert error to string\n * @param {*} error - any kind of thrown error\n * @returns string\n */\nexport function err2Str(error: any): string {\n    if (error instanceof Error) {\n        if (error.stack) return error.stack;\n        if (error.message) return error.message;\n        return JSON.stringify(error);\n    } else {\n        if (typeof error === 'string') return error;\n        return JSON.stringify(error);\n    }\n}\n\n/**\n * Checks if an operand (variable, constant, object, ...) is considered as empty.\n * - empty:     undefined; null; string|array|object, stringified and only with white space(s), and/or `><[]{}`\n * - NOT empty: not matching anything above; any function; boolean false; number -1\n * inspired by helper.js from SmartControl adapter\n */\nexport function isEmpty(toCheck: any): true | false {\n    if (toCheck === null || typeof toCheck === 'undefined') return true;\n    if (typeof toCheck === 'function') return false;\n    let x = JSON.stringify(toCheck);\n    x = x.replace(/\\s+/g, ''); // white space(s)\n    x = x.replace(/\"+/g, ''); // \"\n    x = x.replace(/'+/g, ''); // '\n    x = x.replace(/\\[+/g, ''); // [\n    x = x.replace(/\\]+/g, ''); // ]\n    x = x.replace(/\\{+/g, ''); // {\n    x = x.replace(/\\}+/g, ''); // }\n    return x === '' ? true : false;\n}\n\n/**\n * async wait/pause\n * Actually not needed since a single line, but for the sake of using wait more easily\n * @param {number} ms - number of milliseconds to wait\n */\nexport async function wait(this: Oura, ms: number): Promise<void> {\n    try {\n        await new Promise((w) => setTimeout(w, ms));\n    } catch (e) {\n        this.log.error(this.err2Str(e));\n        return;\n    }\n}\n\n/**\n * Convert date object or timestamp to ISO 8601 formated date \"YYYY-MM-DD\"\n * @param date - Date object or timestamp\n * @returns string - ISO 8601 formatted date like '2023-12-24' or false if error\n */\nexport function getIsoDate(this: Oura, date: number | Date): string | false {\n    try {\n        let d: Date;\n        if (date instanceof Date && date.getMonth()) {\n            d = date;\n        } else if (typeof date === 'number' && date.toString().length > 12) {\n            d = new Date(date);\n        } else {\n            throw 'Invalid date object or timestamp provided';\n        }\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const day = String(d.getDate()).padStart(2, '0');\n        return `${d.getFullYear()}-${month}-${day}`;\n    } catch (e) {\n        this.log.error('Invalid date object or timestamp provided');\n        return false;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBO,SAAS,QAAQ,OAAoB;AACxC,MAAI,iBAAiB,OAAO;AACxB,QAAI,MAAM;AAAO,aAAO,MAAM;AAC9B,QAAI,MAAM;AAAS,aAAO,MAAM;AAChC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC/B,OAAO;AACH,QAAI,OAAO,UAAU;AAAU,aAAO;AACtC,WAAO,KAAK,UAAU,KAAK;AAAA,EAC/B;AACJ;AAQO,SAAS,QAAQ,SAA4B;AAChD,MAAI,YAAY,QAAQ,OAAO,YAAY;AAAa,WAAO;AAC/D,MAAI,OAAO,YAAY;AAAY,WAAO;AAC1C,MAAI,IAAI,KAAK,UAAU,OAAO;AAC9B,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,OAAO,EAAE;AACvB,MAAI,EAAE,QAAQ,OAAO,EAAE;AACvB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,MAAI,EAAE,QAAQ,QAAQ,EAAE;AACxB,SAAO,MAAM,KAAK,OAAO;AAC7B;AAOA,eAAsB,KAAiB,IAA2B;AAC9D,MAAI;AACA,UAAM,IAAI,QAAQ,CAAC,MAAM,WAAW,GAAG,EAAE,CAAC;AAAA,EAC9C,SAAS,GAAP;AACE,SAAK,IAAI,MAAM,KAAK,QAAQ,CAAC,CAAC;AAC9B;AAAA,EACJ;AACJ;AAOO,SAAS,WAAuB,MAAqC;AACxE,MAAI;AACA,QAAI;AACJ,QAAI,gBAAgB,QAAQ,KAAK,SAAS,GAAG;AACzC,UAAI;AAAA,IACR,WAAW,OAAO,SAAS,YAAY,KAAK,SAAS,EAAE,SAAS,IAAI;AAChE,UAAI,IAAI,KAAK,IAAI;AAAA,IACrB,OAAO;AACH,YAAM;AAAA,IACV;AACA,UAAM,QAAQ,OAAO,EAAE,SAAS,IAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AACtD,UAAM,MAAM,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS,GAAG,GAAG;AAC/C,WAAO,GAAG,EAAE,YAAY,KAAK,SAAS;AAAA,EAC1C,SAAS,GAAP;AACE,SAAK,IAAI,MAAM,2CAA2C;AAC1D,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
